name: github-actions
on: [push]
jobs:
  create-build:
    name: Create Build
    runs-on: ubuntu-latest
    if : startsWith(github.ref_name,'doc') != true
    steps:
      - name: Create Build
        run: echo "Create Build"

  smart-doc:
    name: Smart Doc
    runs-on: ubuntu-latest
    if : startsWith(github.ref_name,'doc')
    steps:
      - name: Smart Doc
        run: echo "Smart Doc"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref_name,'v')
    needs: [ actions-build-test-windows-gpu, actions-build-test-linux-gpu ]
    outputs:
      upload_url: ${{ steps.create-new-release.outputs.upload_url }}
    steps:
      - name: Create Github Release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: AisDeployC ${{ github.ref_name }}

  release-windows-gpu:
    name: Windows GPU Release to Github Releases
    runs-on: self-hosted-windows
    if: startsWith(github.ref_name,'v')
    needs: create-release
    steps:
      - name: Copy Engine DLL
        run: |
          XCOPY E:\\onnxruntime-win-gpu-x64-1.8.1\*.dll cmake-build-release /s/e/y 
          XCOPY E:\\actions-runner-demo\_work\AisDeployC-Demo\AisDeployC-Demo\thirdparty\dependencies\*.dll cmake-build-release /s/e/y
          CD cmake-build-release
      - name: Copy AisDeployC lib
        run: |
          XCOPY E:\\actions-runner\_work\AisDeployC\AisDeployC\cmake-build-release\*.lib cmake-build-release /s/e/y
      - name: Archive Release
        uses: vimtor/action-zip@v1
        with:
          files: cmake-build-release\AisDeployC.lib cmake-build-release\onnxruntime.dll cmake-build-release\onnxruntime_providers_cuda.dll cmake-build-release\onnxruntime_providers_shared.dll cmake-build-release\AisDeployC.dll cmake-build-release\vcruntime140_1.dll
          dest: release.zip
      - name: Upload asset to Github Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release.zip
          asset_name: AisDeployC-windows-x64-${{ github.ref_name }}.zip
          asset_content_type: application/zip

  release-linux-gpu:
    name: Linux GPU Release to Github Releases
    runs-on: self-hosted-linux
    if: startsWith(github.ref_name,'v')
    needs: create-release
    steps:
      - name: Archive Release
        run: |
          rm -rf release.zip
          cd build
          cp /home/tzvtc/packages/onnxruntime-linux-x64-gpu-1.8.1/lib/libonnxruntime*.so* ./
          cp /usr/lib/x86_64-linux-gnu/libopencv_imgcodecs.so.* ./
          cp /usr/lib/x86_64-linux-gnu/libopencv_imgproc.so.* ./
          cp /usr/lib/x86_64-linux-gnu/libopencv_core.so.* ./
          zip -r ../release.zip ./*.so* && cd -
      - name: Upload asset to Github Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: AisDeployC-linux-x64-${{ github.ref_name }}.zip
          asset_content_type: application/zip

  actions-build-test-windows-gpu:
    runs-on: self-hosted-windows
    needs: create-build
    steps:
      - uses: actions/checkout@v3
      - name: cmake
        run: |
          C:\Users\Administrator\AppData\Local\JetBrains\Toolbox\apps\CLion\ch-0\221.5921.27\bin\cmake\win\bin\cmake.exe -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=C:/Users/Administrator/AppData/Local/JetBrains/Toolbox/apps/CLion/ch-0/221.5921.27/bin/ninja/win/ninja.exe -G Ninja -S E:\actions-runner-demo\_work\AisDeployC-Demo\AisDeployC-Demo -B E:\actions-runner-demo\_work\AisDeployC-Demo\AisDeployC-Demo\cmake-build-release
      - name: build
        run: |
          cd E:\actions-runner-demo\_work\AisDeployC-Demo\AisDeployC-Demo\cmake-build-release
          C:\Users\Administrator\AppData\Local\JetBrains\Toolbox\apps\CLion\ch-0\221.5921.27\bin\cmake\win\bin\cmake.exe --build .
      - name: Run Test
        run: |
          cd E:\actions-runner-demo\_work\AisDeployC-Demo\AisDeployC-Demo\cmake-build-release
          COPY E:\actions-runner\_work\AisDeployC\AisDeployC\cmake-build-release\AisDeployC*.dll .\
          COPY E:\onnxruntime-win-gpu-x64-1.8.1\lib\onnxruntime*.dll .\
          COPY E:\actions-runner-demo\_work\AisDeployC-Demo\AisDeployC-Demo\thirdparty\dependencies\*.dll .\
          .\basic.exe
          .\industrial_ocr.exe
      - name: Run PyTest
        run: |
          cd E:\actions-runner-demo\_work\AisDeployC-Demo\AisDeployC-Demo
          python -m pytest -s tests/test_interface.py 

  actions-build-test-linux-gpu:
    runs-on: self-hosted-linux
    needs: create-build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: configure
        run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-Werror" ..
      - name: make
        run: cd build && make -j8
      - name: copy libs
        run: cd /home/tzvtc/projects/actions-runner-demo/_work/AisDeployC-Demo/AisDeployC-Demo/build/ && cp -f /home/tzvtc/projects/actions-runner/_work/AisDeployC/AisDeployC/build/*.so* ./
      - name: Run Test
        run: cd /home/tzvtc/projects/actions-runner-demo/_work/AisDeployC-Demo/AisDeployC-Demo/build/ && CUDA_VISIBLE_DEVICES=0 ./basic && CUDA_VISIBLE_DEVICES=0 ./industrial_ocr
      - name: Run PyTest
        run: cd /home/tzvtc/projects/actions-runner-demo/_work/AisDeployC-Demo/AisDeployC-Demo/&& cp -f ./build/*.so* ./ && CUDA_VISIBLE_DEVICES=0 python3 -m pytest -s tests/test_interface.py
